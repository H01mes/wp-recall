<?phpadd_action('admin_menu', 'profile_options_page_rcl',30);function profile_options_page_rcl(){	add_submenu_page( 'manage-wprecall', __('Поля профиля'), __('Поля профиля'), 'manage_options', 'manage-userfield', 'recall_users_profile_edit');}add_block_rcl('content','get_show_profile_fields_lk_rcl',array('id'=>'pf-block','order'=>8,'public'=>1));function get_show_profile_fields_lk_rcl($author_lk){	$profile_fields='';	return apply_filters('show_profile_fields_rcl',$profile_fields,$author_lk);}add_action('wp','add_notify_update_profile');function add_notify_update_profile(){        if (isset($_GET['updated'])) add_notify_rcl(__('Ваш профиль был обновлен'),'success');}//Обновляем профиль пользователяfunction edit_user_profil_recall(){    global $user_ID;    if( !wp_verify_nonce( $_POST['_wpnonce'], 'update-profile_' . $user_ID ) ) return false;        if ( defined('ABSPATH') ) {			require_once(ABSPATH . 'wp-admin/includes/user.php');	} else {			require_once('../wp-admin/includes/user.php');	}	//require_once( ABSPATH . WPINC . '/registration.php' );    $redirect_url = get_redirect_url_rcl(get_author_posts_url($user_ID),'profile').'&updated=true';	    $args = array('hide_empty'=>false);      $allterms = get_terms('category', $args );    update_custom_fields_rcl($user_ID);        check_admin_referer( 'update-profile_' . $user_ID );    $errors = edit_user( $user_ID );    if ( is_wp_error( $errors ) ) {            foreach ( $errors->get_error_messages() as $message )                    $errmsg = "$message";               }    if(isset($errmsg)) wp_die($errmsg);    do_action( 'personal_options_update', $user_ID );          wp_redirect( $redirect_url );}function update_custom_fields_rcl($user_id){    //global $user_ID;    $get_fields = get_option( 'custom_profile_field' );        if($get_fields){			        foreach((array)$get_fields as $custom_field){            $custom_field = apply_filters('update_custom_field_profile',$custom_field);            if(!$custom_field||!$custom_field['slug']) continue;            if(!is_admin()&&$custom_field['admin']==1) continue;            $slug = $custom_field['slug'];            if($custom_field['type']=='checkbox'){                 $vals = array();                if(isset($_POST[$slug])){                    $select = explode('#',$custom_field['field_select']);                    $count_field = count($select);                    foreach($_POST[$slug] as $val){                        for($a=0;$a<$count_field;$a++){                            if($select[$a]==$val){                                $vals[] = $val;                            }                        }                    }                }                if($vals){                    update_user_meta($user_id, $slug, $vals);                }else{                    delete_user_meta($user_id, $slug);                }            }else{                if($_POST[$slug]){                        update_user_meta($user_id, $slug, $_POST[$slug]);								                }else{                        if(get_user_meta($user_id, $slug, $_POST[$slug])) delete_user_meta($user_id, $slug, $_POST[$slug]);                }            }        }    }}//Сохраняем изменения в произвольных полях профиля со страницы пользователяadd_action('personal_options_update', 'rcl_save_profile_fields');add_action('edit_user_profile_update', 'rcl_save_profile_fields');function rcl_save_profile_fields($user_id) {    if ( !current_user_can( 'edit_user', $user_id ) ) return false;        update_custom_fields_rcl($user_id);	}function edit_user_profil_recall_activate ( ) {  if ( isset( $_POST['submit_user_profil'] ) ) {	    add_action( 'wp', 'edit_user_profil_recall' );  }}add_action('init', 'edit_user_profil_recall_activate');//Удаляем аккаунт пользователяfunction delete_acc_user_recall(){	global $user_ID,$wpdb;	if( !wp_verify_nonce( $_POST['_wpnonce'], 'delete-user-' . $user_ID ) ) return false;	$wpdb->query("DELETE FROM ".RCL_PREF."user_action WHERE user ='$user_ID'");	$delete = wp_delete_account( $user_ID );	if($delete){		wp_die(__('Очень жаль, но ваш аккаунт был удален!'));		echo '<a href="/">'.__('Вернуться на главную').'</a>';	}else{		wp_die(__('Удаление аккаунта не удалось! Вернитесь обратно и повторите попытку.'));	}	}//Удаление пользователяfunction wp_delete_account( $id, $reassign = 'novalue' ) {	global $wpdb;	$id = (int) $id;	$user = new WP_User( $id );	// allow for transaction statement	do_action('delete_user', $id);	if ( 'novalue' === $reassign || null === $reassign ) {		$post_types_to_delete = array();		foreach ( get_post_types( array(), 'objects' ) as $post_type ) {			if ( $post_type->delete_with_user ) {				$post_types_to_delete[] = $post_type->name;			} elseif ( null === $post_type->delete_with_user && post_type_supports( $post_type->name, 'author' ) ) {				$post_types_to_delete[] = $post_type->name;			}		}		$post_types_to_delete = apply_filters( 'post_types_to_delete_with_user', $post_types_to_delete, $id );		$post_types_to_delete = implode( "', '", $post_types_to_delete );		$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d AND post_type IN ('$post_types_to_delete')", $id ) );		if ( $post_ids ) {			foreach ( $post_ids as $post_id ){				wp_delete_post( $post_id );                        }		}		$link_ids = $wpdb->get_col( $wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id) );		if ( $link_ids ) {			foreach ( $link_ids as $link_id )				wp_delete_link($link_id);		}	} else {		$reassign = (int) $reassign;		$post_ids = $wpdb->get_col( $wpdb->prepare( "SELECT ID FROM $wpdb->posts WHERE post_author = %d", $id ) );		$wpdb->update( $wpdb->posts, array('post_author' => $reassign), array('post_author' => $id) );		if ( ! empty( $post_ids ) ) {			foreach ( $post_ids as $post_id )				clean_post_cache( $post_id );		}		$link_ids = $wpdb->get_col( $wpdb->prepare("SELECT link_id FROM $wpdb->links WHERE link_owner = %d", $id) );		$wpdb->update( $wpdb->links, array('link_owner' => $reassign), array('link_owner' => $id) );		if ( ! empty( $link_ids ) ) {			foreach ( $link_ids as $link_id )				clean_bookmark_cache( $link_id );		}	}	if ( is_multisite() ) {		remove_user_from_blog( $id, get_current_blog_id() );	} else {		$meta = $wpdb->get_col( $wpdb->prepare( "SELECT umeta_id FROM $wpdb->usermeta WHERE user_id = %d", $id ) );		foreach ( $meta as $mid )			delete_metadata_by_mid( 'user', $mid );		$wpdb->delete( $wpdb->users, array( 'ID' => $id ) );	}	clean_user_cache( $user );	do_action('deleted_user', $id);	return true;}function delete_acc_user_recall_activate ( ) {  if ( isset( $_POST['delete_acc_user_recall'] ) ) {    add_action( 'wp', 'delete_acc_user_recall' );  }}add_action('init', 'delete_acc_user_recall_activate');add_filter('admin_options_wprecall','get_admin_profile_page_content');function get_admin_profile_page_content($content){	    $opt = new Rcl_Options(__FILE__);            $content .= $opt->options(        __('Настройки профиля и аккаунта'),        $opt->option_block(            array(                $opt->title(__('Профиль и аккаунт')),                                $opt->label(__('Разрешить удалять пользователям свой аккаунт?')),                $opt->option('select',array(                    'name'=>'delete_user_account',                    'options'=>array(__('Нет'),__('Да'))                )),                $opt->label(__('Максимальный размер аватара, Mb')),                $opt->option('number',array('name'=>'avatar_weight')),                $opt->notice(__('Ограничить загрузку изображений в качестве аватарок данным значением в мегабайтах. По-умолчанию, 2мб'))            )        )    );    return $content;}add_filter('after-avatar-rcl','get_button_upload_avatar_rcl',2,2);function get_button_upload_avatar_rcl($content,$author_lk){	global $user_ID;	if($user_ID!=$author_lk) return $content;		$content .= '	<div id="userpic">		<div class="js-preview userpic__preview"></div>		<div class="buttons-upload">			<div id="userpic-btn" class="btn btn-success js-fileapi-wrapper">			  <div class="fa fa-download js-browse">				 <span class="btn-txt"></span>				 <input name="filedata" type="file">			  </div>			  <div class="js-upload" style="display: none;">				 <div class="progress progress-success"><div class="js-progress bar"></div></div>				 <span class="btn-txt">загрузка</span>			  </div>		   </div>			<div id="webcam-btn" class="btn btn-success">			  <div class="fa fa-camera js-webcam">				 <span class="btn-txt"></span>			  </div>			  <div class="js-upload" style="display: none;">				 <div class="progress progress-success"><div class="js-progress bar"></div></div>				 <span class="btn-txt">загрузка</span>			  </div>		   </div>		</div>	</div>	<div id="webcam" class="webcam">	   <div class="js-preview webcam__preview"></div>	</div>		<div class="userpic-notice"></div>	<div id="popup" class="popup" style="display: none;">		<div class="popup__body"><div class="js-img"></div></div>		<div style="margin: 0 0 5px; text-align: center;">			<div class="js-upload btn btn_browse btn_browse_small">Загрузить</div>		</div>	</div>';	return $content;}function add_tab_profile_rcl($array_tabs){    $array_tabs['profile']='recall_block_edit_user_profile';    return $array_tabs;}add_filter('ajax_tabs_rcl','add_tab_profile_rcl');add_action('init','add_tab_profile');function add_tab_profile(){    add_tab_rcl('profile','recall_block_edit_user_profile',__('Профиль'),array('class'=>'fa-user','order'=>20,'path'=>__FILE__));}function recall_block_edit_user_profile($author_lk){	global $userdata, $user_ID, $rcl_options;	if($user_ID!=$author_lk) return false;	get_currentuserinfo();	do_action('show_user_profile', $userdata);	$defolt_field = get_option( 'show_defolt_field' );	foreach((array)$defolt_field as $onefield){		switch($onefield){			case 'user_login': $select_login = 'checked="checked"'; break;			case 'first_name': $select_first = 'checked="checked"'; break;			case 'last_name': $select_last = 'checked="checked"'; break;			case 'nickname': $select_nickname = 'checked="checked"'; break;			case 'display_name': $select_display = 'checked="checked"'; break;			//case 'email': $select_email = 'checked="checked"'; break;			case 'url': $select_url = 'checked="checked"'; break;			case 'description': $select_description = 'checked="checked"'; break;		}	}	$profile_block = '<h3>'.__('Профиль пользователя').' '.$userdata->user_login.'</h3>       	<form name="profile" id="your-profile" action="" method="post">	'.wp_nonce_field( 'update-profile_' . $user_ID,'_wpnonce',true,false ).'	<input type="hidden" name="from" value="profile" />	<input type="hidden" name="checkuser_id" value="'.$user_ID.'" />	<table class="form-table">';		$access = 7;	if(isset($rcl_options['consol_access_rcl'])&&$rcl_options['consol_access_rcl'])             $access = $rcl_options['consol_access_rcl'];		if($userdata->user_level >= $access){		$profile_block .= '<tr>			<th>				<span>'.__('Панель инструментов').'</span>			</th>			<td>				<label for="admin_bar_front">				<input id="admin_bar_front" '.checked('true',$userdata->show_admin_bar_front,false).' type="checkbox" value="1" name="admin_bar_front">				'.__('Показывать административную панель при просмотре сайта').'				</label>			</td>		</tr>';	}		if(isset($select_login)){		$profile_block .= '<tr>		<th><label for="user_login">'.__('Логин').':</label></th>		<td><input type="text" name="user_login" class="regular-text" id="user_login" value="'.esc_attr( $userdata->user_login ).'" maxlength="100" disabled /></td>		</tr>';	}	if(isset($select_first)){		$profile_block .= '<tr>		<th><label for="first_name">'.__('Имя').':</label></th>		<td><input type="text" name="first_name" class="regular-text" id="first_name" value="'.esc_attr( $userdata->first_name ).'" maxlength="100" /></td>		</tr>';	}	if(isset($select_last)){		$profile_block .= '<tr>		<th><label for="last_name">'.__('Фамилия').':</label></th>		<td><input type="text" name="last_name" class="regular-text" id="last_name" value="'.esc_attr( $userdata->last_name ).'" maxlength="100" /></td>		</tr>';	}	if(isset($select_nickname)){		$profile_block .= '<tr>		<th><label for="nickname">'.__('Ник').':</label></th>		<td><input type="text" name="nickname" class="regular-text" id="nickname" value="'.esc_attr( $userdata->nickname ).'" maxlength="100" /></td>		</tr>';	}	if(isset($select_display)){		$profile_block .= '<tr>		<th><label for="display_name">'.__('Отображаемое имя').':</label></th>		<td>		<select name="display_name" class="regular-dropdown" id="display_name">';									$public_display = array();			$public_display['display_displayname'] = esc_attr($userdata->display_name);			$public_display['display_nickname'] = esc_attr($userdata->nickname);			$public_display['display_username'] = esc_attr($userdata->user_login);			$public_display['display_firstname'] = esc_attr($userdata->first_name);			if($userdata->first_name&&$userdata->last_name) $public_display['display_firstlast'] = esc_attr($userdata->first_name) . '&nbsp;' . esc_attr($userdata->last_name);			if($userdata->first_name&&$userdata->last_name) $public_display['display_lastfirst'] = esc_attr($userdata->last_name) . '&nbsp;' . esc_attr($userdata->first_name);			$public_display = array_unique(array_filter(array_map('trim', $public_display)));			foreach((array)$public_display as $id => $item) { 				$profile_block .= '<option id="'.$id.'" value="'.esc_attr($item).'">'.esc_attr($item).'</option>';			} 			$profile_block .= '</select>		</td></tr>';	}		    $profile_block .= "<script>( function($) {        $(document).ready( function() {			var select = $('#display_name');	 			if ( select.length ) {				$('#first_name, #last_name, #nickname').bind( 'blur.user_profile', function() {					var dub = [],						inputs = {							display_nickname  : $('#nickname').val() || '',							display_username  : $('#user_login').val() || '',							display_firstname : $('#first_name').val() || '',							display_lastname  : $('#last_name').val() || ''						};	 					if ( inputs.display_firstname && inputs.display_lastname ) {						inputs['display_firstlast'] = inputs.display_firstname + ' ' + inputs.display_lastname;						inputs['display_lastfirst'] = inputs.display_lastname + ' ' + inputs.display_firstname;					}	 					$.each( $('option', select), function( i, el ){						dub.push( el.value );					});	 					$.each(inputs, function( id, value ) {						if ( ! value )							return;	 						var val = value.replace(/<\/?[a-z][^>]*>/gi, '');	 						if ( inputs[id].length && $.inArray( val, dub ) == -1 ) {							dub.push(val);							$('<option />', {								'text': val							}).appendTo( select );						}					});				});			}		});		} ) ( jQuery );	</script>";			$profile_block .= '<tr>		<th><label for="email">'.__('Email').':</label></th>		<td><input type="text" name="email" class="regular-text" id="email" required value="'.esc_attr($userdata->user_email).'" maxlength="100" /></td>		</tr>';		if(isset($select_url)){		$profile_block .= '<tr>		<th><label for="url">'.__('Свой сайт').':</label></th>		<td><input type="text" name="url" class="regular-text" id="url" value="'.esc_url($userdata->user_url).'" maxlength="100" /></td>		</tr>';	}				$profile_block .= '<tr id="password">            <th><label for="pass1">'.__('Новый пароль').'</label></th><br/>            <td><input type="password" name="pass1" id="pass1" size="16" value="" autocomplete="off" onkeyup="passwordStrength(this.value)"  /><br>			<small>'.__('Если вы хотите сменить пароль - введите здесь новый').'</small><br />                <input type="password" name="pass2" id="pass2" size="16" value="" autocomplete="off" /><br />                    <small>'.__('Повторите новый пароль').'</small>';            if(isset($rcl_options['difficulty_parole'])&&$rcl_options['difficulty_parole']==1){                        $profile_block .= '<br />                <div>                    <b>'.__('Индикатор надёжности пароля').':</b>                    <div id="passwordStrength" class="strength0">                            <div id="passwordDescription">'.__('Пароль не введён').'</div>                    </div>                </div>                <p>                <small><strong>'.__('Подсказка').':</strong> '.__('Пароль должен быть не менее 7 символов').'. <br/>                Используйте верхний и нижний регистр для более надежного пароля. <br/>                Используйте также символы: ! " ? $ % ^ &amp;</small>		</p>';            }            $profile_block .= '</td>        </tr>';			if(isset($select_description)){		$profile_block .= '<tr>		<th><label for="description">'.__('Статус').':</label></th>		<td><textarea name="description" class="regular-text" id="description" rows="3" cols="50">'.esc_textarea($userdata->description).'</textarea></td>					</tr>';	}                $profile_block .= '</table>';				$get_fields = get_option( 'custom_profile_field' );	//$get_fields = unserialize( $get_fields);		if($get_fields){                        $profile_block .= '<table>';            $field = '';            $cf = new Rcl_Custom_Fields();            		$get_fields = stripslashes_deep($get_fields);                		foreach((array)$get_fields as $custom_field){                                        $custom_field = apply_filters('custom_field_profile',$custom_field);                                        if($custom_field['admin']==1) continue;                    if(!$custom_field||!$custom_field['slug']) continue;                    $class = (isset($custom_field['class']))? $custom_field['class']: '';                    $id = (isset($custom_field['id']))? 'id='.$custom_field['id']: '';                    $attr = (isset($custom_field['attr']))? ''.$custom_field['attr']: '';                                        $field .= '<tr class="form-block-rcl '.$class.'" '.$id.' '.$attr.'>';                    $star = (isset($field['requared'])&&$field['requared']==1)? ' <span class="required">*</span> ': '';                                   $field .= '<th>'                            . '<label>'.$custom_field['title'].$star.'';                            if($custom_field['type']) $field .= ':';                            $field .= '</label>'                            . '</th>';                                    $field .= '<td>'.$cf->get_input($custom_field,$userdata->$custom_field['slug']).'</td></tr>';					}                		$profile_block .= $field;                                $profile_block .= '</table>'                        . "<script>                            jQuery(function(){                                jQuery('#your-profile').find('.requared-checkbox').each(function(){                                    var name = jQuery(this).attr('name');                                    var chekval = jQuery('#your-profile input[name=\"'+name+'\"]:checked').val();                                    if(chekval) jQuery('#your-profile input[name=\"'+name+'\"]').attr('required',false);                                    else jQuery('#your-profile input[name=\"'+name+'\"]').attr('required',true);                                });"                            . "});"                        . "</script>";                	}        $profile_block = apply_filters('profile_options_rcl',$profile_block,$userdata);		$profile_block .= '<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="'.$user_ID.'" />	<input type="hidden" name="admin_color" value="'.esc_attr( $userdata->admin_color ).'" />	<input type="hidden" name="rich_editing" value="'.esc_attr( $userdata->rich_editing ).'" />	<input type="hidden" name="comment_shortcuts" value="'.esc_attr( $userdata->comment_shortcuts ).'" />';				if ( !empty($userdata->admin_bar_front) ) {		$profile_block .= '<input type="hidden" name="admin_bar_front" value="'.esc_attr( $userdata->admin_bar_front ).'" />';	}				if ( !empty($userdata->admin_bar_admin) ) {		$profile_block .= '<input type="hidden" name="admin_bar_admin" value="'.esc_attr( $userdata->admin_bar_admin ).'" />';	}					$profile_block .= '<div style="text-align:right;"><input type="submit" id="cpsubmit" class="recall-button" value="'.__('Обновить профиль').'" name="submit_user_profil" /></div>	</form>';	if($rcl_options['delete_user_account']==1){            $profile_block .= '            <form method="post" action="" name="delete_account" onsubmit="return confirm(\''.__('Вы уверены? Потом восстановить не получится!').'\');">            '.wp_nonce_field('delete-user-'.$user_ID,'_wpnonce',true,false).'            <input type="submit" id="delete_acc" class="recall-button"  value="'.__('Удалить свой профиль').'" name="delete_acc_user_recall"/>            </form>';	}        	return $profile_block;}//Редактируем произвольные поля профиляfunction recall_users_profile_edit(){            add_sortable_scripts();	if ( ! class_exists( 'Rcl_EditFields' ) ) include_once RCL_PATH.'functions/rcl_editfields.php';	$f_edit = new Rcl_EditFields('profile');	$default_form = '';	$profile_default_fields = get_profile_default_fields();	if ( $f_edit->verify() ) {		$f_edit->update_fields('usermeta');		$_posts = $_POST;		$save_data = array();		foreach( $profile_default_fields as $filed ) {			if ( isset( $_posts[$filed['id']] ) && $_posts[$filed['id']] == 'on' ) {				array_push( $save_data, $filed['id'] );			}		}		update_option('show_defolt_field', $save_data );	}	$profile_default_fields_styles = "		<style>		#inputs_user_fields table {			cursor: move;			background:#fafafa;			border: 1px solid #CCCCCC;			border-radius: 5px 5px 5px 5px;			margin: 2px;			width: 100%;			}		table td {			padding: 2px 10px;			}		#inputs_user_fields textarea {			width:100%;			}		.two-col {			width:20%;			}		#inputs_user_fields .new {			background:yellow;			cursor: default;			}		</style>";	if ( sizeof( $profile_default_fields ) > 0 ) {		$default_form .= apply_filters('rcl_profile_default_fields_styles', $profile_default_fields_styles);		$default_form .= '<p>'.__('Поля, необходимые для отображения в профиле отмечаем галочками.').'</p>';		$default_form .= '<table class="form-table" style="width:600px;">';			$field_loop = $loop = 0;			foreach ( $profile_default_fields as $field ) {				$field_loop++;				if ( 0 == ( $field_loop - 1 ) % 2 ) $default_form .= '<tr class="rcl_defoult_row">';                                $df_field = get_option( 'show_defolt_field' );				$checked = ($df_field&&in_array( $field['id'], $df_field )) ? 'checked="checked"' : '';				$default_form .= sprintf(__('<td><input type="%s" name="%s" %s /></td><td>%s</td>'), $field['type'], $field['id'], $checked, $field['label']);				if ( 0 == $field_loop % 2 || $field_loop == count( $profile_default_fields ) ) $default_form .= '</tr><!-- End .rcl_defoult_row -->';				$loop++;			}		$default_form .= '</table>';	}	$users_fields = '<h2>'.__('Управление полями профиля').'</h2>'                        .$f_edit->edit_form(array(            $f_edit->option('select',array(                'name'=>'requared',                'notice'=>__('обязательное поле'),                'value'=>array(__('Нет'),__('Да'))            )),            $f_edit->option('select',array(                'name'=>'register',                'notice'=>__('отобразить в форме регистрации'),                'value'=>array(__('Нет'),__('Да'))            )),            $f_edit->option('select',array(                'name'=>'order',                'notice'=>__('отобразить при оформлении заказа для гостей'),                'value'=>array(__('Нет'),__('Да'))            )),            $f_edit->option('select',array(                'name'=>'req',                'notice'=>__('показывать содержимое для других пользователей (вверху своего ЛК)'),                'value'=>array(__('Нет'),__('Да'))            )),            $f_edit->option('select',array(                'name'=>'admin',                'notice'=>__('заполняется только администрацией сайта'),                'value'=>array(__('Нет'),__('Да'))            ))        ),$default_form);        	echo $users_fields;}//Выводим возможность синхронизации соц.аккаунтов в его личном кабинете//при активированном плагине Uloginif(function_exists('ulogin_profile_personal_options')){    function get_ulogin_profile_options($profile_block,$userdata){                ob_start();        ulogin_profile_personal_options($userdata);       	$profile_block .= ob_get_contents();	ob_end_clean();       	return $profile_block;    }    add_filter('profile_options_rcl','get_ulogin_profile_options',10,2);}add_filter('show_profile_fields_rcl','get_show_custom_profile_fields',10,2);function get_show_custom_profile_fields($fields_content,$author_lk){	$get_fields = get_option( 'custom_profile_field' );	//$get_fields = unserialize( $get_fields);			if($get_fields){		$show_custom_field = '';		$get_fields = stripslashes_deep($get_fields);                                $cf = new Rcl_Custom_Fields();                		foreach((array)$get_fields as $custom_field){                                           $custom_field = apply_filters('custom_field_profile',$custom_field);                        if(!$custom_field) continue;                    			$slug = $custom_field['slug'];			if($custom_field['req']==1){                            $meta = get_the_author_meta($slug,$author_lk);		                            $show_custom_field .= $cf->get_field_value($custom_field,$meta);			}		}			}		if(isset($show_custom_field))$fields_content .= '<div class="show-profile-fields">'.$show_custom_field.'</div>';	return $fields_content;}//Выводим произвольные поля профиля на странице пользователя в админкеif (is_admin()):	add_action('profile_personal_options', 'custom_profile_users_recall');	add_action('edit_user_profile', 'custom_profile_users_recall');endif;function custom_profile_users_recall($user){    $get_fields = get_option( 'custom_profile_field' );    $cf = new Rcl_Custom_Fields();    if($get_fields){        $field = '<h3>Произвольные поля профиля:</h3>        <table class="form-table">';        foreach((array)$get_fields as $custom_field){                                       $slug = $custom_field['slug'];            $meta = get_the_author_meta($slug,$user->ID);            $field .= '<tr><th><label>'.$custom_field['title'].':</label></th>';            $field .= '<td>'.$cf->get_input($custom_field,$meta).'</td>';            $field .= '</tr>';        }        $field .= '</table>';        echo $field;    }}function get_profile_default_fields() {	$default_fields = array(		array(			'id' => 'user_login',			'label' => __('Логин'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Логин пользователя')		),		array(			'id' => 'first_name',			'label' => __('Имя'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Имя пользователя')		),		array(			'id' => 'last_name',			'label' => __('Фамилия'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Фамилия пользователя')		),		array(			'id' => 'nickname',			'label' => __('Ник'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Ник пользователя')		),		array(			'id' => 'display_name',			'label' => __('Отображаемое имя'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Отображаемое имя пользователя')		),		array(			'id' => 'email',			'label' => __('Емейл (обязательно)'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Емейл пользователя')		),		array(			'id' => 'url',			'label' => __('Сайт'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Сайт пользователя')		),		array(			'id' => 'description',			'label' => __('Статус'),			'type' => 'checkbox',			'std' => 'no',			'desc' => __('Статус пользователя')		)	);	return apply_filters('rcl_profile_default_fields', $default_fields );}function get_footer_scripts_profile_rcl($script){		global $rcl_options;		$weight = (isset($rcl_options['avatar_weight'])&&$rcl_options['avatar_weight'])? $rcl_options['avatar_weight']: $weight = '2';		$script .= "			jQuery('#userpic').fileapi({	   url: rcl_url+'add-on/profile/upload-avatar.php',	   accept: 'image/*',	   imageSize: { minWidth: 100, minHeight: 100 },	   maxSize: ".$weight." * FileAPI.MB,	   elements: {		  active: { show: '#userpic-btn .js-upload', hide: '#userpic-btn .js-browse' },		  preview: {			 el: '.js-preview',			 width: 120,			 height: 120		  },		  progress: '#userpic-btn .js-progress'	   },	   onSelect: function (evt, ui){			ui.files;			if( ui.other.length ){			  var errors = ui.other[0].errors;			  if( errors ){				  errors.maxSize;				  errors.maxFiles;				  errors.minWidth;				  errors.minHeight;				  errors.maxWidth;				  errors.maxHeight;			  }		  }		  var file = ui.files[0];		  if( file ){			 jQuery('#popup').modal({				closeOnEsc: true,				closeOnOverlayClick: false,				onOpen: function (overlay){				   jQuery(overlay).on('click', '.js-upload', function (){					  jQuery.modal().close();					  jQuery('#userpic').fileapi('upload');				   });				   jQuery('.js-img', overlay).cropper({					  file: file,					  bgColor: '#fff',					  maxSize: [jQuery(window).width()-100, jQuery(window).height()-100],					  minSize: [150, 150],					  selection: '90%',					  onSelect: function (coords){						 jQuery('#userpic').fileapi('crop', file, coords);					  }				   });				}			 }).open();		  }	   },	   onUpload:function(evt, uiEvt){			jQuery('.userpic-notice,.webcam-notice').empty();		},	   onComplete:function(evt, uiEvt){			var result = uiEvt.result;			if(result['result']){				jQuery('.userpic-notice').html(result['result']);			}		}	});	jQuery('#webcam-btn').fileapi({		   url: rcl_url+'add-on/profile/upload-avatar.php',		   autoUpload: true,		   elements: {			  active: { show: '#webcam-btn .js-upload', hide: '#webcam-btn .js-webcam' },			  preview: {				 el: '#userpic .js-preview',				 width: 120,				 height: 120			  },			  progress: '#webcam-btn .js-progress'		   }	});			jQuery('.js-webcam').click(function (evt){		   var modal = jQuery('#popup').modal({			closeOnOverlayClick: false,			  onOpen: function (overlay){				 jQuery('.js-img', overlay).webcam({					width: 320,					height: 320,					error: function (err){					   jQuery.modal().close();					   alert(\"Похоже, что ваш браузер\nне поддерживает эту возможность\");					},					success: function (webcam){					   jQuery(overlay).on('click', '.js-upload', function (){						  jQuery('#webcam-btn').fileapi('add', webcam.shot());						  modal.close();					   });					}				 });			  },			  onClose: function (overlay){				 jQuery('.js-img', overlay).webcam('destroy');			  },			  onUpload:function(evt, uiEvt){				jQuery('.userpic-notice,.webcam-notice').empty();			},		   onComplete:function(evt, uiEvt){				var result = uiEvt.result;				if(result['result']){					jQuery('.userpic-notice').html(result['result']);				}			}		   });		   modal.open();		   evt.preventDefault();	});";	return $script;}add_filter('file_footer_scripts_rcl','get_footer_scripts_profile_rcl');