<?phpif(function_exists('rcl_enqueue_style')) rcl_enqueue_style('private',__FILE__);add_action('wp_enqueue_scripts', 'output_scripts_new_private_mess');function output_scripts_new_private_mess(){	global $user_ID,$rcl_options,$post,$wpdb;	if(isset($rcl_options['notify_message'])&&$rcl_options['notify_message'])             return false;	wp_enqueue_script( 'jquery' );	$glup = $rcl_options['global_update_private_message'];			if(!$glup) $new_mess = $wpdb->get_row("SELECT ID FROM ".RCL_PREF."private_message WHERE adressat_mess = '$user_ID' AND status_mess = '0' OR adressat_mess = '$user_ID' AND status_mess = '4'");	else $new_mess = true;	if($new_mess){		$scr = false;		if($rcl_options['view_user_lk_rcl']==1){			$get = 'user';			if($rcl_options['link_user_lk_rcl']!='') $get = $rcl_options['link_user_lk_rcl'];			if($user_ID==$_GET[$get]||$rcl_options['lk_page_rcl']!=$post->ID) $scr = true;			}else{			if(!is_author()||is_author($user_ID)) $scr = true;		}		if($scr) wp_enqueue_script( 'newmess_recall', plugins_url('js/new_mess.js', __FILE__) );	}}add_filter('rcl_postfooter_user','get_private_chat_button_rcl',20,2);function get_private_chat_button_rcl($content,$user_id){	global $rcl_options;	global $user_ID;	if(!$rcl_options['tab_private']) $rcl_options['tab_private'] = 'Приватный чат';	if($user_ID&&$user_ID!=$user_id){ 				$content .= get_button_rcl($rcl_options['tab_private'],get_redirect_url_rcl(get_author_posts_url($user_id),'privat'),array('icon'=>'fa-comments','class'=>false,'attr'=>'title='.$rcl_options['tab_private'])) ;	}	return $content;}if(function_exists('add_tab_rcl')){     add_action('init','add_tab_message');    function add_tab_message(){        add_tab_rcl('privat',array('rcl_message','recall_user_private_message'),'Приватный чат',                                array(                                    'public'=>1,                                    'class'=>'fa-comments',                                    'order'=>10,                                    'path'=>__FILE__                                ));      }}class rcl_message{		public $room;	public $user_lk;	public $mess_id;	public $ava_user_lk;	public $ava_user_ID;	    public function __construct() {			if (!is_admin()):                        //if(function_exists('fileapi_footer_scripts')) fileapi_footer_scripts();			add_action('wp_enqueue_scripts', array(&$this, 'output_style_scripts_private_mess'));			add_action('init', array(&$this, 'delete_blacklist_user_recall_activate'));			add_action('init', array(&$this, 'delete_private_message_recall'));			add_action('init', array(&$this, 'old_status_message_recall_activate'));						//add_filter('rcl_header_user',array(&$this, 'get_header_black_list_button'),5,2);                        			add_filter('wp_head',array(&$this, 'add_global_update_new_mess_script'));			add_filter('wp_footer',array(&$this, 'add_rcl_new_mess_conteiner'));                        add_filter('access_chat_rcl',array(&$this, 'get_chek_ban_user'),10,2);                        if(function_exists('add_block_rcl'))                             add_block_rcl('header',array(&$this, 'get_header_black_list_button'),array('id'=>'bl-block','order'=>50,'public'=>1));                        			if(function_exists('add_shortcode'))                             add_shortcode('chat',array(&$this, 'get_shortcode_chat'));		endif;				if (is_admin()):			add_filter('file_footer_scripts_rcl',array(&$this, 'get_footer_scripts_privat_rcl'));			add_filter('admin_options_wprecall',array(&$this, 'get_admin_private_mess_page_content'));			add_filter('file_scripts_rcl',array(&$this, 'get_scripts_message_rcl'));		endif;                add_filter('ajax_tabs_rcl',array(&$this, 'add_tab_privat_rcl'));		add_action('wp_ajax_update_message_history_recall', array(&$this, 'update_message_history_recall'));		add_action('days_garbage_file_rcl', array(&$this, 'garbage_file_rcl')); 		add_action('wp', array(&$this, 'activation_days_garbage_file_rcl')); 		add_action('wp_ajax_add_private_message_recall', array(&$this, 'add_private_message_recall'));		    }	function add_rcl_new_mess_conteiner(){		echo '<div id="rcl-new-mess"></div>';	}	function add_global_update_new_mess_script(){		global $rcl_options;		$global_update = 1000*$rcl_options['global_update_private_message'];		echo '<script type="text/javascript">var global_update_num_mess = '.$global_update.';</script>'."\n";	}	function output_style_scripts_private_mess(){		wp_enqueue_script( 'jquery' );		wp_enqueue_script( 'sounds_recall', plugins_url('js/ion.sound.min.js', __FILE__) );		}		function activation_days_garbage_file_rcl() {		global $rcl_options;		if(!isset($rcl_options['file_exchange'])||!$rcl_options['file_exchange']) return false;		if ( !wp_next_scheduled( 'days_garbage_file_rcl' ) ) {			$start_date = strtotime("2014-04-20 0:50:0");			wp_schedule_event( $start_date, 'daily', 'days_garbage_file_rcl');  		}  	}  	 	function garbage_file_rcl(){		global $wpdb,$rcl_options;				if(!$rcl_options['savetime_file']) $savetime = 7*24*3600;		else $savetime = $rcl_options['savetime_file']*24*3600;				$files = $wpdb->get_row("SELECT * FROM ".RCL_PREF."private_message WHERE status_mess = '4' AND status_mess = '5' AND time_mess < (NOW() - INTERVAL $savetime SECOND)");				if(!$files) return false;				$upload_dir = wp_upload_dir();		foreach($files as $file){			$name = explode('/',$file->content_mess);			$cnt = count($name);			$f_name = $name[--$cnt];					$path_temp = $upload_dir['basedir'].'/temp-files/'.$f_name;			unlink($path_temp);		}				$wpdb->query("DELETE FROM ".RCL_PREF."private_message WHERE status_mess = '4' AND status_mess = '5' AND time_mess < (NOW() - INTERVAL $savetime SECOND)");			}		function get_admin_private_mess_page_content($content){		global $rcl_options;				if(!isset($rcl_options['file_exchange'])||!$rcl_options['file_exchange']){                    wp_clear_scheduled_hook('days_garbage_file_rcl');		}                                $opt = new Rcl_Options(__FILE__);                        $content .= $opt->options(                    'Настройки личных сообщений',                    $opt->option_block(                        array(                            $opt->title('Личные сообщения'),                            $opt->label('Вывод сообщений в переписке'),                            $opt->option('select',array(                                'name'=>'sort_mess',                                'options'=>array('Сверху-Вниз','Снизу-Вверх')                            )),                            $opt->label('Количество сообщений в переписке'),                            $opt->option('text',array('name'=>'max_private_message')),                            $opt->notice('по-умолчанию 100 сообщений в переписке (на каждую переписку пользователя)'),                                                        $opt->label('Пауза между запросами на получение новых сообщений на странице переписки с другим пользователем в секундах'),                            $opt->option('text',array('name'=>'update_private_message')),                            $opt->notice('Количество запросов на получение нового сообщения на странице переписки'),                                                        $opt->label('Количество запросов на получение нового сообщения на странице переписки'),                            $opt->option('text',array('name'=>'max_request_new_message')),                            $opt->notice('Укажите максимальное количество запросов для получения нового сообщения от собеседника на странице ведения переписки. '                                    . 'Если количество запросов превысит указанное значение, то запросы прекратятся. Если ничего не указано или указан ноль, то ограничения нет.'),                                                        $opt->label('Пауза между запросами на получение новых сообщений на всех других страницах сайта в секундах'),                            $opt->option('text',array('name'=>'global_update_private_message')),                            $opt->notice('Если ноль, то получение новых сообщений только в момент загрузки страницы без последующих запросов'),                            $opt->label('Блокировка запросов если собеседник offline'),                            $opt->option('select',array(                                'name'=>'block_offrequest',                                'options'=>array('Не блокировать','Блокировать запросы')                            )),                            $opt->notice('Имеются ввиду запросы на получение новых сообщений от пользователя на странице которого вы находитесь'),                                                        $opt->label('Обмен файлами'),                            $opt->option('select',array(                                'name'=>'file_exchange',                                'parent'=>true,                                'options'=>array('Запрещено','Разрешено')                            )),                            $opt->child(                                array(                                    'name'=>'file_exchange',                                    'value'=>1                                ),                                array(                                    $opt->label('Максимальный размер файлов, Mb'),                                    $opt->option('text',array('name'=>'file_exchange_weight')),                                    $opt->notice('Ограничить загрузку файлов данным значением в мегабайтах. По-умолчанию, 2мб'),                                                                        $opt->label('Время хранения файла'),                                    $opt->option('text',array('name'=>'savetime_file')),                                    $opt->notice('Укажите максимальное время хранения невостребованных файлов в днях. По истечении этого срока файла будет удален. По-умолчанию 7 дней.'),                                                                        $opt->label('Лимит непринятых файлов'),                                    $opt->option('text',array('name'=>'file_limit')),                                    $opt->notice('Укажите количеств файлов непринятых адресатами при котором у пользователя пропадает возможность дальнейшей пересылки файлов. Защита от спама. По-умолчанию - без ограничений.')                                )                            )                        )                    )                ); 		return $content;	}		function get_header_black_list_button($author_lk){		global $user_ID;		global $wpdb;			if(!$user_ID||$user_ID==$author_lk) return false;                                $banlist = $wpdb->get_row("SELECT * FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID' AND ban = '$author_lk'");                if(!$banlist){                        $header_lk = '<div id="add_black_list_button" class="floatright">										'.get_button_rcl('В черный список','#',array('icon'=>'fa-bug','attr'=>'name='.$author_lk,'id'=>'add_black_list')).'</div>';                }else{                        $header_lk = '<div class="blacklist-notice"Пользователь<br /> в черном списке                                <form method="post" action="">                                <input type="hidden" name="ban_user" value="'.$banlist->ban.'">                                <input id="remove_black_list" class="recall-button" name="remove_black_list" type="submit" value="Разблокировать">                                </form>                                </div>';                }				return $header_lk;	}	function mess_preg_replace_rcl($mess){		//$mess = $this->oembed_filter( $mess );		$mess = popuplinks(make_clickable($mess));		if(function_exists('wp_oembed_get')){                        $links='';			preg_match_all('/href="([^"]+)"/', $mess, $links);			foreach( $links[1] as $link ){				$m_lnk = wp_oembed_get($link,array('width'=>250,'height'=>250));				if($m_lnk) $mess .= $m_lnk;			}					}		//$mess = preg_replace("~(http|https|ftp|ftps)://(.*?)(\s|\n|[,.?!](\s|\n)|$)~", '<a target="_blank" href="$1://$2">$1://$2</a>$3', $mess);		if(function_exists('convert_smilies')) $mess = convert_smilies($mess);		return $mess;	}		function oembed_filter( $text ) {		add_filter( 'embed_oembed_discover', '__return_false', 999 );		remove_filter( 'embed_oembed_discover', '__return_false', 999 );		return $text;	}	        function add_tab_privat_rcl($array_tabs){            $array_tabs['privat']=array('rcl_message','recall_user_private_message');            return $array_tabs;        }                      function get_chek_ban_user($chat,$author_lk){            global $user_ID,$wpdb;            $ban = false;            if($wpdb->get_var("show tables like '".RCL_PREF."black_list_user'"))		$ban = $wpdb->get_row("SELECT * FROM ".RCL_PREF."black_list_user WHERE user = '$author_lk' AND ban = '$user_ID'");            if($ban){		$chat = '<p class="b-upload__dnd">Пользователь запретил писать ему</p>';                            }            return $chat;        }		function recall_user_private_message($author_lk){		global $user_ID,$rcl_options,$wpdb,$rcl_userlk_action;                $last_action = last_user_action_recall($rcl_userlk_action);		                if(!$last_action) $online = 1;                else $online = 0;		if(!$user_ID){			return 'Авторизуйтесь, чтобы начать переписку с пользователем.';		}		$privat_block = $this->get_private_message_content($author_lk, $online);		if(isset($rcl_options['tab_newpage'])&&$rcl_options['tab_newpage']==2) $privat_block .= '<script type="text/javascript" src="'.TEMP_URL.'scripts/footer-scripts.js"></script>		<script>jQuery(function() {jQuery("#private-smiles").hover(function(){jQuery("#private-smiles .smiles").show();},function(){jQuery("#private-smiles .smiles").hide();});});</script>';					return $privat_block;	}		function get_num_important(){		global $wpdb,$user_ID;		$st = $user_ID+100;		$cnt = $wpdb->get_var("SELECT COUNT(ID) FROM ".RCL_PREF."private_message 				WHERE 					author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess IN (7,$st)				OR  author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess IN (7,$st)				ORDER BY ID DESC");		return $cnt;	}		function get_smiles(){		global $wpsmiliestrans;		if(!$wpsmiliestrans) return false;			$smiles = '<script type="text/javascript"> function addsmile($smile){ jQuery("#content_mess").insertAtCaret(" "+$smile+" "); } </script>';		$dm_showsmiles = '';		$dm_smiled = array();		foreach ($wpsmiliestrans as $tag => $dm_smile) {			if (!in_array($dm_smile,$dm_smiled)) {				$dm_smiled[] = $dm_smile;				$tag = str_replace(' ', '', $tag);				$dm_showsmiles .= '<img src="'.get_bloginfo('wpurl').'/wp-includes/images/smilies/'.$dm_smile.'" alt="'.$tag.'" onclick="addsmile(\''.$tag.'\');"/> ';			}		}				$smiles .= '<div id="private-smiles"><img src="'.get_bloginfo('wpurl').'/wp-includes/images/smilies/icon_smile.gif" id="get-private-smiles"><div class="smiles">'.$dm_showsmiles.'</div></div>';				return $smiles;	}		function get_chat($online=0){                            add_resizable_scripts();            		global $user_ID,$rcl_options,$wpdb;                $access = '';		$access = apply_filters('access_chat_rcl',$access,$this->user_lk);				if($this->room){			$user_ID = $this->room;			$user_lk = 0;			$online=1;		}else{			$user_lk = $this->user_lk;		}				if(!$this->room) $where = "WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID'";		else $where = "WHERE author_mess = '$user_ID' OR adressat_mess = '$user_ID'";				$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message $where ORDER BY id DESC LIMIT 10");					$num_mess = $wpdb->get_var("SELECT COUNT(ID) FROM ".RCL_PREF."private_message $where");				if(!$this->room) $this->ava_user_lk = get_avatar($this->user_lk, 40);		$this->ava_user_ID = get_avatar($user_ID, 40);				$max_private_mess = $rcl_options['max_private_message'];		if(!$max_private_mess) $max_private_mess = 100;		if($num_mess>$max_private_mess&&!$this->room){			$delete = $num_mess - $max_private_mess;			$st = $user_ID+100;			$us = $this->user_lk+100;			$delete_num = $wpdb->query("DELETE FROM ".RCL_PREF."private_message WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess NOT IN (7,$st,$us) OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess NOT IN (7,$st,$us) ORDER BY id ASC LIMIT $delete");			$num_mess = $num_mess - $delete_num;		}                                $num=0;                                if(!$rcl_options['sort_mess']) krsort($private_messages);		foreach((array)$private_messages as $message){                    $num++;	                    $messlist = $this->get_private_message_block_rcl($messlist,$message);					                    if($num==10) break;				}		if(!$access){                    $textarea = '<div class="prmess">';                    if($this->room) $textarea .= '<span title="Собеседник" id="opponent"></span> '.get_button_rcl('Все контакты','#',array('icon'=>'fa-book','id'=>'get-all-contacts'));                    if($rcl_options['file_exchange']==1){                            $textarea .= '<div id="simple-btn" class="fa fa-paperclip btn recall-button btn-success js-fileapi-wrapper">                               <div class="js-browse">                                      <span class="btn-txt">выбрать файл</span>                                      <input name="filedata" type="file">                               </div>                               <div class="js-upload" style="display: none">                                      <div class="progress progress-success">                                             <div class="js-progress bar"></div>                                      </div>                                      <span class="btn-txt">загрузка (<span class="js-size"></span>)</span>                               </div>                            </div>';                    }                    if($online == 0) $textarea .='<span class="fa fa-exclamation-triangle notice">Пользователь получит уведомление на email</span>';                    if($rcl_options['file_exchange']==1){                            $textarea .= '<div id="upload-files-mess">                            <div id="dnd" class="b-upload b-upload_dnd">                                    <div class="b-upload__dnd"><textarea name="content_mess" id="content_mess" rows="3"></textarea></div>                               <div class="b-upload__dnd-not-supported">                                      <div class="btn btn-success js-fileapi-wrapper">                                             <input name="filedata" multiple="" type="file">                                      </div>                               </div>                               <div class="js-files b-upload__files">                                      <div class="js-file-tpl b-thumb" data-id="<%=uid%>" title="<%-name%>, <%-sizeText%>">                                             <div class="b-thumb__progress progress progress-small"><div class="bar"></div></div>                                             <div class="b-thumb__name"><%-name%></div>                                      </div>                               </div>                            </div>                            </div>';                    }else{                            $textarea .= '<textarea name="content_mess" id="content_mess" rows="3"></textarea>';                    }                    $textarea .= '                    <input type="hidden" name="adressat_mess" id="adressat_mess" value="'.$user_lk.'">                    <input type="hidden" name="online" id="online" value="'.$online.'">';                    $textarea .= $this->get_smiles();                    $textarea .= '<p class="fa fa-exclamation-triangle floatright notice"><b>Enter</b> - перенос строки, <b>Ctrl+Enter</b> - отправить</p>                    <div class="fa fa-edit" id="count-word">400</div>';                    $textarea .= '<div class="private-buttons">                            '.get_button_rcl('Отправить','#',array('icon'=>'fa-mail-forward','class'=>'addmess alignright','attr'=>false,'id'=>false));                            if($this->get_num_important()>0) $textarea .= get_button_rcl('Важные сообщения','#',array('icon'=>'fa-star','class'=>'important alignleft','id'=>'get-important-rcl'));                    $textarea .= '</div>'                            . '<div id="resize"></div>'                            . '</div>';                                        if(!$private_messages) $newblock = '<div class="new_mess" align="center">Здесь будет выводится история переписки</div>';                    else $newblock = '<div class="new_mess"></div>';                                        if($num_mess>10) $getold = '<div class="old_mess_block"><a href="#" class="old_message">Показать более ранние сообщения</a></div>';                                        if(!$rcl_options['sort_mess']){                        $messlist = $getold.$messlist;                        $messlist .= $newblock;                        $privat_block = '<div id="resize-content"><div id="message-list">'.$messlist.'</div></div>';                        $privat_block .= $textarea;                        $privat_block .= "<script>jQuery(document).ready(function() {                                                            var div = jQuery('#resize-content');                                div.scrollTop( div.get(0).scrollHeight );                                                                var chatHeight = 'chatHeight';                                var chatNow = jQuery.cookie(chatHeight);                                if(chatNow != null)                                    jQuery('#resize-content,#resize').css('height', chatNow + 'px');                                jQuery('#resize').resizable( {                                    alsoResize: '#resize-content',                                    stop: function(event, ui) {                                        chatNow = jQuery('#resize-content').height();                                        jQuery.cookie(chatHeight, chatNow);                                    }                                });                            });"                            . "</script>";                    }else{                        $privat_block = $textarea;                        $messlist = $newblock.$messlist;                        $messlist .= $getold;                        $privat_block .= '<div id="message-list">'.$messlist.'</div>';                    }                    		} else {                    $privat_block .= $access;		}								$privat_block .= "<script type='text/javascript'>var old_num_mess = ".$num_mess."; var block_mess = 1; var user_old_mess = ".$user_lk.";</script>";				if(($rcl_options['block_offrequest']==1&&$online==0)||$access) return $privat_block;				if(!$rcl_options['update_private_message']) $rcl_options['update_private_message'] = 10;		$sec_update = 1000*$rcl_options['update_private_message'];				$privat_block .= "<script type='text/javascript'>				var update_mass_ID; var max_sec_update_rcl=0;				function update_mass(){";			if($rcl_options['max_request_new_message']>0)$privat_block .= "			max_sec_update_rcl++; if(max_sec_update_rcl>".$rcl_options['max_request_new_message'].") return false;			";			$privat_block .= "jQuery.post('".RCL_URL."add-on/message/check-message.php?lk='+user_old_mess+'&user=".$user_ID."', function(check){			if (check) {				jQuery(function(){									var ar_check = check;					ar_check.split('|');					if(ar_check[2]==0){						jQuery('.mess_status').remove();					}					//alert(ar_check[1]);					if(ar_check[0]==0) return false;																	var dataString_new_mess = 'action=update_message_history_recall&user='+user_old_mess;						jQuery.ajax({					type: 'POST',					data: dataString_new_mess,					dataType: 'json',					url: '".get_bloginfo('wpurl')."/wp-admin/admin-ajax.php',					success: function(data){						if(data['recall']==100){							jQuery('.new_mess').replaceWith(data['message_block']);                                                        var div = jQuery('#resize-content');                                                        div.scrollTop( div.get(0).scrollHeight );							jQuery.ionSound.play('water_droplet');							max_sec_update_rcl = 0;						}						if(data['read']==200){													jQuery('.mess_status').remove();													}					} 					});	  						return false;						});			}			});							//update_mass_ID = setTimeout('update_mass()', ".$sec_update.");      		}		setInterval(function(){update_mass();},".$sec_update.");		window.onload=function(){update_mass();}							</script>";							return $privat_block;	}	function get_private_message_content($user_id, $online, $room=false){		global $user_ID,$wpdb;		$this->user_lk = $user_id;		if($user_ID==$this->user_lk){			$privat_block = '<div class="correspond">';			$contacts = $wpdb->get_col("SELECT contact FROM ".RCL_PREF."private_contacts WHERE user = '$user_ID' AND status = '1'");			if($contacts){							$days = 7;											$privat_block .= '<div class="buttons-navi"><a data="'.$days.'" class="sec_block_button active" href="#"><i class="fa fa-clock-o"></i>'.$days.' дней</a>				<a data="30" class="sec_block_button" href="#"><i class="fa fa-clock-o"></i>месяц</a> 				<a data="0" class="sec_block_button" href="#"><i class="fa fa-clock-o"></i>все время</a>';								$ban = $wpdb->get_var("SELECT ID FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID'");							if(isset($ban)) $privat_block .= '<a data="-1" class="sec_block_button" href="#"><i class="fa fa-bug"></i>Черный список</a>';								$privat_block .= '<a data="important" class="sec_block_button" href="#"><i class="fa fa-clock-o"></i>Важное</a>';								$privat_block .= '</div>							<div id="contact-lists">';								$privat_block .= $this->get_loop_contacts_rcl($contacts,$days);									$privat_block .= '</div>';						} else {				$privat_block .= '<div class="single_correspond"><p>Вы еще ни с кем не вели переписку</p></div>';			}			$privat_block .= '</div>';				} else {					$privat_block = $this->get_chat($online);					}		return $privat_block;	}	function get_interval_contacts_rcl(){		global $wpdb,$user_ID;		if(!$user_ID) exit;		$days = esc_sql($_POST['days']);				if($days=='important'){			$privat_block = $this->get_all_important_mess();		}else{			if($days<0){				$contacts = $wpdb->get_col("SELECT ban FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID'");			}else{				$contacts = $wpdb->get_col("SELECT contact FROM ".RCL_PREF."private_contacts WHERE user = '$user_ID' AND status = '1'");								}						if(!$contacts) $privat_block = '<h3>Контакты не найдены!</h3>';			else $privat_block = $this->get_loop_contacts_rcl($contacts,$days);		}		$log['message_block'] = $privat_block;		$log['recall']=100;		echo json_encode($log);		exit;					}		function get_loop_contacts_rcl($contacts,$days){		global $wpdb,$user_ID;		$interval = $days*24*3600;		$sql_int = '';		if($days>0) $sql_int = "AND time_mess > (NOW() - INTERVAL $interval SECOND)";                $a=0;                $cntctslist='';		foreach((array)$contacts as $contact){			if(++$a>1)$cntctslist .= ',';			$cntctslist .= $contact;		}				if(!$cntctslist) return '<h3>Контакты не найдены!</h3>';		$rcl_action_users = $wpdb->get_results("SELECT user,time_action FROM ".RCL_PREF."user_action WHERE user IN ($cntctslist)");		if($days>=0){			$su_list  = $wpdb->get_results("			SELECT author_mess,time_mess,adressat_mess,status_mess FROM (			SELECT * FROM ".RCL_PREF."private_message WHERE adressat_mess IN ($cntctslist) AND author_mess = '$user_ID' $sql_int 			OR author_mess IN ($cntctslist) AND adressat_mess = '$user_ID' $sql_int ORDER BY time_mess DESC			) TBL GROUP BY author_mess,adressat_mess");						foreach((array)$su_list as $s){$list[] = (array)$s;}			$list = array_multisort_key_rcl((array)$list, 'time_mess', SORT_ASC);			foreach((array)$list as $l){				if($l['author_mess']!=$user_ID) $s_contact=$l['author_mess'];				if($l['adressat_mess']!=$user_ID) $s_contact=$l['adressat_mess'];				$contact_list[$s_contact]['time'] = $l['time_mess'];				$contact_list[$s_contact]['contact'] = $s_contact;				$contact_list[$s_contact]['status'] = $l['status_mess'];								}			$contact_list = array_multisort_key_rcl((array)$contact_list, 'time', SORT_DESC);				}else{						foreach((array)$contacts as $c){				$contact_list[]['contact'] = $c;			}					}				$name_users = $wpdb->get_results("SELECT ID,display_name FROM ".$wpdb->prefix."users WHERE ID IN ($cntctslist)");					foreach((array)$name_users as $name){							$names[$name->ID] = $name->display_name;		}								$privat_block = '';			foreach((array)$contact_list as $data){					if(!$names[$data['contact']]) continue;						foreach((array)$rcl_action_users as $action){				if($action->user==$data['contact']){$time_action = $action->time_action; break;}			}			$last_action = last_user_action_recall($time_action);			$privat_block .= '<div class="single_correspond history-'.$data['contact'];			if($data['status']==0) $privat_block .= ' redline';			$privat_block .= '">';			$privat_block .= '<div class="floatright">';			if(!$last_action)				$privat_block .= '<div class="status_author_mess online"><i class="fa fa-circle"></i></div>';			else				$privat_block .= '<div class="status_author_mess offline"><i class="fa fa-circle"></i></div>';			$redirect_url = get_redirect_url_rcl(get_author_posts_url($data['contact']),'privat');								$privat_block .= '<span user_id="'.$data['contact'].'" class="author-avatar"><a href="'.$redirect_url.'">'.get_avatar($data['contact'], 40).'</a></span><a href="#" class="recall-button ';						if($days>0) $privat_block .= 'del_history';			else $privat_block .= 'remove_ban_list';						$privat_block .='" id="'.$data['contact'].'"><i class="fa fa-remove"></i></a>			</div>			<p><a href="'.$redirect_url.'">'.$names[$data['contact']].'</a>';			if(isset($data['time'])) $privat_block .='<br/><small>Последнее сообщение: '.$data['time'].'</small>';			else $privat_block .='<br/><small>История переписки отсутствует</small>';			$privat_block .='</p></div>';		}		if(!$privat_block) $privat_block = '<h3>Контакты не найдены!</h3>';			return $privat_block;	}	function get_delete_private_mess_rcl($message){		global $user_ID;		if(!function_exists('get_bloginfo')) return false;                $button = false;		if($message->status_mess==0&&$message->author_mess==$user_ID){			$button = '<a title="Удалить?" class="fa fa-trash mess_status" href="'.wp_nonce_url( get_bloginfo('wpurl').'/?id_mess='.$message->ID.'&user_id='.$this->user_lk.'&delete_private_message_recall=true', $user_ID ).'"></a>';			}		return $button;	}	function get_private_message_block_rcl($privat_block,$message){	global $user_ID,$wpdb;			if($this->room){			if($message->author_mess!=$user_ID) $this->user_lk = $message->author_mess;			if($message->adressat_mess!=$user_ID) $this->user_lk = $message->adressat_mess;			$this->ava_user_lk = get_avatar($this->user_lk, 40);		}				$this->mess_id = $message->ID;				$privat_block .= $this->get_delete_private_mess_rcl($message);		$privat_block = $this->get_content_private_message_rcl($message,$privat_block);							if($message->author_mess==$this->user_lk){			if($message->status_mess==0) $new_st = 1;			if($message->status_mess==4) $new_st = 5;			if(isset($new_st)&&($new_st==1||$new_st==5)) $wpdb->update( RCL_PREF.'private_message',array( 'status_mess' => $new_st ),array( 'ID' => $message->ID ));		}				return $privat_block;	}	function get_content_private_message_rcl($message,$privat_block){		if($message->author_mess == $this->user_lk){								$avatar_mess = $this->ava_user_lk;			$class="you";			if($message->status_mess==6) $class="file";		}else{ 			$avatar_mess = $this->ava_user_ID;			$class="im";			if($message->status_mess==4||$message->status_mess==5) $class="file";			if($message->status_mess==6){				$avatar_mess = $this->ava_user_lk;				$class="you";			}		}		$content_message = $this->mess_preg_replace_rcl($message->content_mess);							$content_message = $this->get_url_file_message($message,$content_message);				$content_message = $this->str_nl2br_rcl($content_message);				if($class=='you') $uslk = 'user_id="'.$this->user_lk.'"';		else $uslk = false;		$privat_block .= '<div id="message-'.$this->mess_id.'" class="public-post message-block '.$class.'">';						if($class!="file")$privat_block .= '<div '.$uslk.' class="author-avatar">'.$avatar_mess.'</div>';						$privat_block .= '<div class="content-mess">			<p class="time-message"><span class="time">'.$message->time_mess.'</span></p>';		if($class!="file")$privat_block .= '<span class="privat-balloon"></span>';		$privat_block .= '<div class="balloon-message"><p>'.$content_message.'</p></div>		</div>';				$st = $message->status_mess;		if($st!=0&&$st!=4&&$st!=5&&$st!=6){			$cl = $this->class_important($message->status_mess);			if($cl) $ttl = 'Снять отметку';			else $ttl = 'Отметить как важное';			$privat_block .= '<a href="#" idmess="'.$this->mess_id.'" title="'.$ttl.'" class="important '.$cl.'"></a>';		}			$privat_block .= '</div>';					return 	$privat_block;			}		function class_important($status){		global $user_ID;		if($status==$user_ID + 100||$status==7) return 'active';	}		function update_important_rcl(){		global $wpdb;		global $user_ID;		$id_mess = esc_sql($_POST['id_mess']);		if(!$user_ID||!$id_mess)return false;				$mess = $wpdb->get_row("SELECT * FROM ".RCL_PREF."private_message WHERE ID = '$id_mess'");				if($mess->author_mess==$user_ID) $user = $mess->adressat_mess;		else $user = $mess->author_mess;					if($mess->status_mess==1){			$status = $user_ID + 100;			$log['res']=100;					}else if($mess->status_mess==7){			$status = $user + 100;			$log['res']=200;		}else if($mess->status_mess==$user + 100){			$status = 7;			$log['res']=100;		}else if($mess->status_mess==$user_ID + 100){			$status = 1;			$log['res']=200;		}else{			return false;		}				$wpdb->update( RCL_PREF.'private_message',			array( 'status_mess' => $status ),			array( 'ID' => $id_mess)			);					echo json_encode($log);			exit;	}		function get_all_important_mess(){		global $user_ID;		global $wpdb;				$st = $user_ID+100;				$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message WHERE author_mess = '$user_ID' AND status_mess IN (7,$st) OR adressat_mess = '$user_ID' AND status_mess IN (7,$st) ORDER BY ID DESC");		$message_block = '';		foreach((array)$private_messages as $message){			if($message->author_mess!=$user_ID) $this->user_lk = $message->author_mess;			if($message->adressat_mess!=$user_ID) $this->user_lk = $message->adressat_mess;			//$content_message = $this->mess_preg_replace_rcl($message->content_mess);								$this->ava_user_lk = '<a href="'.get_author_posts_url($this->user_lk).'">'.get_avatar($this->user_lk, 40).'</a>';			$this->ava_user_ID = get_avatar($user_ID, 40);			$message_block = $this->get_private_message_block_rcl($message_block,(object)$message);		} 				$log['message_block'] = $message_block;		$log['recall']=100;		echo json_encode($log);		exit;	}		/*************************************************	Получаем помеченные сообщения	*************************************************/	function get_important_message_rcl(){		global $user_ID,$wpdb,$rcl_options;		$this->user_lk = esc_sql($_POST['user']);		$type = esc_sql($_POST['type']);		if($user_ID){					$num_mess = 0;						if($type==1){				$where = "author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID'";				$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message WHERE $where ORDER BY id DESC LIMIT 10");								$num_mess = $wpdb->get_var("SELECT COUNT(ID) FROM ".RCL_PREF."private_message WHERE $where");			}else{				$st = $user_ID+100;				$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message 				WHERE 					author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess IN (7,$st)				OR  author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess IN (7,$st)				ORDER BY ID DESC");			}                                                if($num_mess>10) $getold = '<div class="old_mess_block"><a href="#" class="old_message">Показать более поздние сообщения</a></div>';                        $message_block = '';                        $newmess = '<div class="new_mess"></div>';                                                if(!$rcl_options['sort_mess']) krsort($private_messages);			foreach((array)$private_messages as $message){				//$content_message = $this->mess_preg_replace_rcl($message->content_mess);				$this->ava_user_lk = get_avatar($message->author_mess, 40);				$this->ava_user_ID = $this->ava_user_lk;				$message_block = $this->get_private_message_block_rcl($message_block,(object)$message);			}                                                if(!$rcl_options['sort_mess']){                            $message_block = $getold.$message_block.$newmess;                        }else{                            $message_block = $newmess.$message_block;                            $message_block .= $getold;                        }                        			$log['recall']=100;			$log['content']=$message_block;		}		echo json_encode($log);				exit;	}	//Отмечаем входящее сообщение как прочтенное	function old_status_message_recall(){		global $wpdb;		global $user_ID;				if(!$user_ID)return false;					//$id_mess = $_POST['id_mess'];		$author_mess = esc_sql($_POST['author_mess']);					$result = $wpdb->update( RCL_PREF.'private_message',			array( 'status_mess' => 1 ),			array( 'author_mess' => "$author_mess", 'adressat_mess' => $user_ID, 'status_mess'=>0)			);					wp_redirect( get_redirect_url_rcl(get_author_posts_url($author_mess),'privat')); exit;				}	function old_status_message_recall_activate ( ) {		if ( isset( $_POST['old_status_message_recall'] ) ) add_action( 'wp', array(&$this, 'old_status_message_recall'));	}		//Удаление непрочтенного сообщения из переписки	function delete_private_message_recall(){	global $wpdb,$user_ID;		if ( !isset( $_GET['delete_private_message_recall'] ) ) return false;		if( !wp_verify_nonce( $_GET['_wpnonce'], $user_ID ) ) wp_die('Error');		$user_id = $_GET['user_id']; $id_mess = $_GET['id_mess'];			$result = $wpdb->query("DELETE FROM ".RCL_PREF."private_message WHERE ID = '$id_mess'");		if (!$result) wp_die('Error');					wp_redirect( get_redirect_url_rcl(get_author_posts_url($user_id),'privat') );  exit;	}		//Удаляем из черного списка	function delete_blacklist_user_recall(){		global $wpdb;		global $user_ID;		if($user_ID){			//$idbanlist = $_POST['idbanlist'];			$ban_user = esc_sql($_POST['ban_user']);			$result = $wpdb->query("DELETE FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID' AND ban = '$ban_user'");						do_action('rcl_delete_user_blacklist',$ban_user,$user_ID);			if ($result) {				wp_redirect( get_author_posts_url($ban_user) );  exit;						} else {			  wp_die('Error');			}		}					}	function delete_blacklist_user_recall_activate ( ) {	  if ( isset( $_POST['remove_black_list'] ) ) {		add_action( 'wp', array(&$this, 'delete_blacklist_user_recall'));	  }	}		/*************************************************	Добавление личного сообщения	*************************************************/	function add_private_message_recall(){		global $user_ID,$wpdb;		if(!$user_ID) exit;			$_POST = stripslashes_deep( $_POST );  			$this->user_lk = esc_sql($_POST['adressat_mess']);					$content_mess = esc_textarea($_POST['content_mess']);							$online = 0;				$status_mess = 0;			$time = current_time('mysql');			$rcl_action_users = $wpdb->get_row("SELECT * FROM ".RCL_PREF."user_action WHERE user = '$this->user_lk'");			$last_action = last_user_action_recall($rcl_action_users->time_action);										if(!$last_action) $online = 1;						$result = add_message_rcl(array('addressat'=>$this->user_lk,'content'=>$content_mess));						if ($result) {							rcl_update_timeaction_user();				do_action('rcl_new_private_message', $this->user_lk, $user_ID, $online);				/*if($online == 0){                                    $title = 'Личное сообщение';                                    $to = get_the_author_meta('user_email',$this->user_lk);                                    $url = get_redirect_url_rcl(get_author_posts_url($user_ID),'privat');                                                        $mess = '<p>Вам было отправлено личное сообщение</p>                                    <div style="float:left;margin-right:15px;">'.get_avatar($user_ID,60).'</div>                                    <p>от пользователя '.get_the_author_meta('display_name',$user_ID).'</p>                                    <p>Вы можете прочитать сообщение, перейдя по ссылке: <a href="'.$url.'">'.$url.'</a></p>';                                    rcl_mail($to, $title, $mess);													}*/								if($_POST['widget']!='undefined'){					$wpdb->update( 						RCL_PREF.'private_message',						array( 'status_mess' => 1 ), 						array( 'ID' => $_POST['widget'] )					);					$message_block = '<p class="success-mess">Ваше сообщение отправлено!</p>';					$log['recall']=200;				}else{					$id_mess = $wpdb->get_var("SELECT ID FROM ".RCL_PREF."private_message WHERE author_mess = '$user_ID' AND time_mess = '$time'");		                                        $message_block = '';					$message = array('ID'=>$id_mess,'content_mess'=>$content_mess,'status_mess'=>0,'author_mess'=>$user_ID,'time_mess'=>$time);					$this->ava_user_lk = '';					$this->ava_user_ID = get_avatar($user_ID, 40);					$message_block = $this->get_private_message_block_rcl($message_block,(object)$message);                                        $message_block .= '<div class="new_mess"></div>';					$log['recall']=100;				}											$log['message_block']=$message_block;			}else{				$log['recall']=120;					}						echo json_encode($log);			exit;	}	/*************************************************	Удаление истории переписки	*************************************************/		function delete_history_private_recall(){		global $wpdb,$user_ID;		if($user_ID){			$this->user_lk = esc_sql($_POST['id_user']);					$status = $wpdb->get_var("SELECT status FROM ".RCL_PREF."private_contacts WHERE user='$this->user_lk' AND contact='$user_ID'");			if($status==3){				//Если собеседник тоже удалил пользователя из контактов, то удаляем всю переписку между ними, тк она им не нужна				$wpdb->query("DELETE FROM ".RCL_PREF."private_contacts 				WHERE user='$user_ID' AND contact='$this->user_lk' 				OR user='$this->user_lk' AND contact='$user_ID'");				$wpdb->query("DELETE FROM ".RCL_PREF."private_message 				WHERE author_mess='$user_ID' AND adressat_mess='$this->user_lk' 				OR author_mess='$this->user_lk' AND adressat_mess='$user_ID'");			}else{				$wpdb->update( 					RCL_PREF.'private_contacts',						array( 'status' => 3 ), 						array( 'user' => "$user_ID", 'contact' => "$this->user_lk" )					);			}			$log['id_user']=$this->user_lk;			$log['otvet']=100;		} else{			$log['otvet']=1;		}		echo json_encode($log);		exit;	}		/*************************************************	Удаление из черного списка	*************************************************/		function remove_ban_list_rcl(){		global $wpdb,$user_ID;		if($user_ID){			$this->user_lk = esc_sql($_POST['id_user']);					$id_ban = $wpdb->get_var("SELECT ID FROM ".RCL_PREF."black_list_user WHERE user='$user_ID' AND ban='$this->user_lk'");			if($id_ban){							$wpdb->query("DELETE FROM ".RCL_PREF."black_list_user WHERE ID='$id_ban'");						}			$log['id_user']=$this->user_lk;			$log['otvet']=100;		} else{			$log['otvet']=1;		}		echo json_encode($log);		exit;	}		/*************************************************	Отмечаем сообщение как прочтенное	*************************************************/		function close_new_message_recall(){		global $wpdb;		global $user_ID;				if($user_ID){			$wpdb->update( 				RCL_PREF.'private_message',				array( 'status_mess' => 1 ), 				array( 'ID' => esc_sql($_POST['id_mess']) )			);			$log['message_block'] = '<p class="success-mess">Сообщение отмечено как прочтенное</p>';			$log['recall']=100;		}		echo json_encode($log);		exit;	}		/*************************************************	Добавление в черный список	*************************************************/		function add_blacklist_recall(){		global $wpdb,$user_ID;				if(!$user_ID) exit;				$this->user_lk = esc_sql($_POST['add_id_user']);				$result = $wpdb->insert(RCL_PREF.'black_list_user',				array( 'user' => "$user_ID", 'ban' => "$this->user_lk" )		);				do_action('rcl_add_user_blacklist',$this->user_lk,$user_ID);		if ($result) $log['otvet']=100;				else $log['otvet']=1;				echo json_encode($log);		exit;	}		/*************************************************	Обновление истории переписки на странице собеседника	*************************************************/	function update_message_history_recall(){		global $user_ID;		global $wpdb;				$this->user_lk = esc_sql($_POST['user']);		if($user_ID){							if(!$this->user_lk){					$where = "WHERE adressat_mess = '$user_ID' AND status_mess = '0' OR adressat_mess = '$user_ID' AND status_mess = '4'";				}else{					$where = "WHERE author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess = '0' OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess = '4'";				}							$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message $where ORDER BY id DESC");									                                foreach((array)$private_messages as $message){                                        if(!$this->user_lk){                                                if($message->author_mess!=$user_ID) $this->user_lk = $message->author_mess;                                                else $this->user_lk = $message->adressat_mess;                                        }                                        //$content_message = $this->mess_preg_replace_rcl($message->content_mess);					                                        //$content_message = $this->str_nl2br_rcl($content_mess);						                                        $content_mess = apply_filters('rcl_get_new_private_message',$content_mess,$this->user_lk,$user_ID);						                                        $message_block .= $this->get_delete_private_mess_rcl($message);						                                        $this->ava_user_lk = get_avatar($message->author_mess, 40);                                        $this->ava_user_ID = $this->ava_user_lk;                                        $message_block = $this->get_content_private_message_rcl((object)$message,$message_block);                                        if($message->author_mess==$this->user_lk){                                                if($message->status_mess==0) $new_st = 1;                                                if($message->status_mess==4) $new_st = 5;                                                if($new_st==1||$new_st==5) $wpdb->update( RCL_PREF.'private_message',array( 'status_mess' => $new_st ),array( 'ID' => $message->ID )	);                                                $log['delete']=200;                                        }                                }                                $message_block .= '<div class="new_mess"></div>';					                                $log['recall']=100;				                                $log['message_block']=$message_block;			$no_read_mess = $wpdb->get_var("SELECT COUNT(ID) FROM ".RCL_PREF."private_message 			WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess = '0' 			OR author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess = '4'");				if($no_read_mess==0){					$log['read']=200;				}				}		echo json_encode($log);			exit;	}		/*************************************************	Запрос на получение новых сообщений на сайте	*************************************************/	function get_new_outside_message_recall(){		global $user_ID;		global $wpdb;		if(!$user_ID) return false;						$mess = $wpdb->get_row("SELECT * FROM ".RCL_PREF."private_message WHERE adressat_mess = '$user_ID' AND status_mess ='0'");					if(!$mess){			$log['recall']=0;								echo json_encode($log);				exit;		}		$wpurl = get_wpurl();                $rcl_action_users = $wpdb->get_row("SELECT * FROM ".RCL_PREF."user_action WHERE user = '$mess->author_mess'");		$last_action = last_user_action_recall($rcl_action_users->time_action);	                $class = (!$last_action)?'online':'offline';                $online = (!$last_action)?1:0;                		$message_block .= '<div id="privatemess">'                            .'<div id="'.$mess->ID.'" class="close-mess-window">'                            . '<i class="fa fa-times-circle"></i>'                        . '</div>'			.'<p class="title-new-mess">Вам новое сообщение!</p>'				                        . '<div class="private-message">'                                                        . '<div class="content-notice">'                                . '<div class="notice-ava">'                                    . '<div class="mini_status_user '.$class.'">'                                        . '<i class="fa fa-circle"></i>'                                    . '</div>'                                    .get_avatar($mess->author_mess,60)                                .'</div>                                <p class="name-author-mess">                                    Отправитель: '.get_the_author_meta('display_name', $mess->author_mess).'                                </p>                                <p class="content-mess">'.$mess->content_mess.'</p>                                <div class="prmess">                                    <textarea name="content_mess" id="minicontent_mess" rows="3" style="width:98%;padding:5px;"></textarea>                                                                       <div id="minicount-word">400</div>                                    <input type="button" name="addmess" class="miniaddmess recall-button" value="Отправить">                                    <input type="hidden" name="adressat_mess" id="miniadressat_mess" value="'.$mess->author_mess.'">                                    <input type="hidden" name="online" id="minionline" value="'.$online.'">                                    <input type="hidden" name="widget-mess" id="widget-mess" value="'.$mess->ID.'">                                </div>                            </div>                            <form class="form_new_message" action="" method="post">                                <input type="hidden" name="id_mess" value="'.$mess->ID.'">                                <input type="hidden" name="author_mess" value="'.$mess->author_mess.'">                                                             <input class="reading_mess  recall-button" type="submit" name="old_status_message_recall" value="Перейти к переписке">                            </form>                            <input type="button" name="view-form" class="recall-button view-form" value="Ответить">                                                        </div>                        </div>';						$log['recall']=100;						$log['message_block']=$message_block;					echo json_encode($log);			exit;	}	/*************************************************	Получаем старые сообщения из истории переписки	*************************************************/	function get_old_private_message_recall(){		global $user_ID,$wpdb,$rcl_options;		$old_num_mess = esc_sql($_POST['old_num_mess']);		$this->user_lk = esc_sql($_POST['user']);		$block_mess = esc_sql($_POST['block_mess']);		$post_mess = 10;		$start_limit = ($block_mess-1)*$post_mess;		$mess_show = $block_mess*$post_mess;				if($this->user_lk) $where = "WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID'";		else $where = "WHERE author_mess = '$user_ID' OR adressat_mess = '$user_ID'";					$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message $where ORDER BY id DESC LIMIT $start_limit,10");					$num_mess = $wpdb->get_var("SELECT COUNT(ID) FROM ".RCL_PREF."private_message $where");								if($user_ID){						if(!$this->user_lk) $user_lk = 0;                        if(!$rcl_options['sort_mess'])krsort($private_messages);                        			foreach((array)$private_messages as $message){			                            if(!$user_lk){                                    if($message->author_mess!=$user_ID) $this->user_lk = $message->author_mess;                                    else $this->user_lk = $message->adressat_mess;                            }                            $this->ava_user_lk = get_avatar($message->author_mess, 40);                            $this->ava_user_ID = $this->ava_user_lk;                            $message_block = $this->get_private_message_block_rcl($message_block,(object)$message);									}                                                 if($old_num_mess>$mess_show) $getold = '<div class="old_mess_block"><a href="#" class="old_message">Показать более поздние сообщения</a></div>';			                        if(!$rcl_options['sort_mess']) $message_block = $getold.$message_block;                        else $message_block .= $getold;                        			$log['recall']=100;			$log['message_block']=$message_block;			$log['num_mess_now']=$num_mess;		}		echo json_encode($log);				exit;	}		function get_shortcode_chat($atts,$content=null){		global $user_ID;		extract(shortcode_atts(array('room'=>false),$atts));		$this->room = $user_ID;		return '<div id="lk-content" class="chatroom rcl-content">		<div class="privat_block recall_content_block active" style="display: block;">		'.$this->get_chat().'		</div>		</div>';	}		function get_url_file_message($mess,$content){		global $user_ID;		if($mess->status_mess==6) return 'Файл был загружен.';		if($mess->status_mess==4||$mess->status_mess==5){			if($mess->author_mess==$user_ID&&$mess->status_mess==5) return 'Файл был получен, но еще не загружен.';			if($mess->author_mess==$user_ID&&$mess->status_mess==4) return 'Файл был отправлен получателю.';			$content = wp_nonce_url(addon_url('download.php?fileid='.$mess->ID,__FILE__), 'user-'.$user_ID );			$short_url = substr($content, 0, 25)."...".substr($content, -15);			$content = 'Ссылка на пересылаемый файл: <br><a class="link-file-rcl" target="_blank" href="'.$content.'">'.$short_url.'</a><br> <small>(принимайте файлы только от доверенных источников)</small>';		}		return $content;	}		function str_nl2br_rcl($content){		$content_message = str_replace("\'","'",$content);		$content_message = str_replace('\"','"',$content_message);		$content_message = nl2br($content_message);		return $content_message;	}	function get_footer_scripts_privat_rcl($script){		global $rcl_options;		$weight = (isset($rcl_options['file_exchange_weight'])&&$rcl_options['file_exchange_weight'])? $rcl_options['file_exchange_weight']: $weight = '2';				$url = "url: '".addon_url('upload-file.ph',__FILE__)."',";				$OnComplete = "onComplete:function(evt, uiEvt){				var result = uiEvt.result;				if(result['recall']==100){					var text = 'Файл был успешно отправлен.';								}				if(result['recall']==150){					var text = 'Вы превысили лимит на количество отправляемых файлов. Дождитесь пока файлы отправленные ранее будут приняты.';								}				jQuery('.new_mess').replaceWith('<div class=\"public-post message-block file\"><div class=\"content-mess\"><p style=\"margin-bottom:0px;\" class=\"time-message\"><span class=\"time\">'+result['time']+'</span></p><p class=\"balloon-message\">'+text+'</p></div></div><div class=\"new_mess\"></div>');                                var div = jQuery('#resize-content');                                div.scrollTop( div.get(0).scrollHeight );			}";		$script .= "				jQuery('.link-file-rcl').live('click',function(){			jQuery(this).parent().text('Удаляю файл с сервера');		});		var talker = jQuery('input[name=\"adressat_mess\"]').val();		var online = jQuery('input[name=\"online\"]').val();		jQuery('#dnd').fileapi({		   ".$url."		   paramName: 'filedata',		   maxSize: ".$weight." * FileAPI.MB,		   data:{talker:talker,online:online},		   autoUpload: true,		   clearOnComplete:true,		   elements: {			  list: '.js-files',			  file: {				 tpl: '.js-file-tpl',				 preview: {					el: '.b-thumb__preview',					width: 80,					height: 80				 },				 upload: { show: '.progress' },				 complete: { hide: '.progress' },				 progress: '.progress .bar'			  },			  dnd: {				 el: '.b-upload__dnd',				 hover: 'b-upload__dnd_hover',				 fallback: '.b-upload__dnd-not-supported'			  }		   },			".$OnComplete."		});		jQuery('#simple-btn').fileapi({		   ".$url."		   paramName: 'filedata',		   maxSize: ".$weight." * FileAPI.MB,		   data:{talker:talker,online:online},		   autoUpload: true,		   elements: {			  size: '.js-size',			  active: { show: '.js-upload', hide: '.js-browse' },			  progress: '.js-progress'		   },		   onSelect: function (evt, data){				data.all; 				data.files; 				if( data.other.length ){									var errors = data.other[0].errors;					if( errors ){						if(errors.maxSize) alert('Превышен допустимый размер файла.\nОдин файл не более ".$weight."MB');					}				}			},			".$OnComplete."		});";		return $script;	}		function get_scripts_message_rcl($script){				$ajaxdata = "type: 'POST', data: dataString, dataType: 'json', url: wpurl+'wp-admin/admin-ajax.php',";		$ajaxfile = "type: 'POST', data: dataString, dataType: 'json', url: rcl_url+'add-on/message/ajax-request.php',";					$script .= "			jQuery('#private-smiles').hover(				function(){				  jQuery('#private-smiles .smiles').show();				},				function(){				  jQuery('#private-smiles .smiles').hide();				}			);							jQuery('.view-form').live('click',function(){							jQuery('#privatemess .prmess').slideDown();					jQuery('.view-form').slideUp();							return false;			});						jQuery('.delete_old_message').delay(60000).fadeOut();						function count_word_in_message(word){						var count = 400 - word.val().length;				return count;					}						function get_color_count_word(count){				var color;				if(count>150) color = 'green';				if(count<150) color = 'orange';					if(count<50) color = 'red';				return color;			}						jQuery('#content_mess').live('keyup', function(){				var word = jQuery(this);				count = count_word_in_message(word);				color = get_color_count_word(count);				jQuery('#count-word').css('color', color).text(count);								if(word.val().length > 399)				word.val(word.val().substr(0, 399));			});						jQuery('#minicontent_mess').live('keyup', function(){				var word = jQuery(this);				count = count_word_in_message(word);				color = get_color_count_word(count);				jQuery('#minicount-word').css('color', color).text(count);								if(word.val().length > 399)				word.val(word.val().substr(0, 399));			});						jQuery.ionSound({				sounds: ['e-oh','water_droplet'],				path: '".addon_url('sounds/',__FILE__)."',				multiPlay: false,				volume: '0.5'			});		/* Добавление личного сообщения */					function add_private_message_recall(){				var content_mess = encodeURIComponent(jQuery('#content_mess').attr('value'));				var widget = jQuery('#widget-mess').attr('value');				var adressat_mess = jQuery('#adressat_mess').attr('value');				if(adressat_mess=='0'){ 					alert('Выберите собеседника!'); return false;				}				var online = jQuery('#online').attr('value');				max_sec_update_rcl = 0;				jQuery('#content_mess').attr('value', '');				if(content_mess)					var dataString = 'action=add_private_message_recall&content_mess='+content_mess+'&adressat_mess='+adressat_mess+'&online='+online+'&widget='+widget+'&user_ID='+user_ID;				else					return false;				jQuery.ajax({					".$ajaxdata."					success: function(data){						if(data['recall']==100){													jQuery('.new_mess').replaceWith(data['message_block']);                                                        var div = jQuery('#resize-content');                                                        div.scrollTop( div.get(0).scrollHeight );						}						if(data['recall']==200){							jQuery('#privatemess').html(data['message_block']).fadeOut(5000);											}					} 				});	  					return false;			}			jQuery('.addmess').live('click',function(){			var content_text = jQuery('#content_mess').val();			if(content_text) add_private_message_recall();			return false;			});						ctrl = false;			function breakText() {			  var caret = jQuery('#content_mess').getSelection().start;			  jQuery('#content_mess').insertText('".'\r\n'."', caret, false).setSelection(caret+1, caret+1);			}		 			jQuery('#content_mess').keydown(function(event){			  switch (event.which) {				case 13: return false;				case 17: ctrl = true;			  }			});						jQuery('#content_mess').keyup(function(event){			var content_text = jQuery('#content_mess').val();			  switch (event.which) {				case 13:				  if (ctrl){				  if(content_text)					add_private_message_recall();					return false;				  }				  breakText();				break;				case 17: ctrl = false;			  }          			});						function add_private_minimessage_recall(){				var content_mess = jQuery('#minicontent_mess').attr('value');				var widget = jQuery('#widget-mess').attr('value');				var adressat_mess = jQuery('#miniadressat_mess').attr('value');				if(content_mess)					var dataString = 'action=add_private_message_recall&content_mess='+content_mess+'&adressat_mess='+adressat_mess+'&widget='+widget+'&user_ID='+user_ID;				else					return false;				jQuery.ajax({					".$ajaxdata."					success: function(data){						if(data['recall']==200){							jQuery('#privatemess').html(data['message_block']).fadeOut(5000);							jQuery('#rcl-new-mess').delay(2000).queue(function () {jQuery('#rcl-new-mess').empty();jQuery('#rcl-new-mess').dequeue();});						}					} 				});	  					return false;			}			jQuery('.miniaddmess').live('click',function(){			var content_text = jQuery('#minicontent_mess').val();			if(content_text)				add_private_minimessage_recall();			});						ctrl = false;			function minibreakText() {			  var caret = jQuery('#minicontent_mess').getSelection().start;			  jQuery('#minicontent_mess').insertText('".'\r\n'."', caret, false).setSelection(caret+1, caret+1);			}		 			jQuery('#minicontent_mess').keydown(function(event){			  switch (event.which) {				case 13: return false;				case 17: ctrl = true;			  }			});					/* Отмечаем сообщение как прочтенное */				jQuery('.close-mess-window').live('click',function(){				var id_mess = parseInt(jQuery(this).attr('id').replace(/\D+/g,''));				var dataString = 'action=close_new_message_recall&id_mess='+id_mess+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('#privatemess').html(data['message_block']).fadeOut(5000);							jQuery('#rcl-new-mess').delay(2000).queue(function () {jQuery('#rcl-new-mess').empty();jQuery('#rcl-new-mess').dequeue();});						} else {							alert('Error');						}					} 				});							return false;			});		/* Добавление в черный список */				jQuery('#add_black_list').live('click',function(){				var add = jQuery(this);				var add_list = add.attr('name');				var dataString = 'action=add_blacklist_recall&add_id_user='+add_list+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['otvet']==100){							jQuery('#add_black_list_button>a').replaceWith('<p style=\'border:1px solid #ccc;padding:5px;text-align:center;\'>Пользователь<br />добавлен в<br />черный список</p>');						} else {							alert('Error');						}					} 				});							return false;			});		/* Удаление истории переписки */			jQuery('.del_history').live('click',function(){				var id_user = jQuery(this).attr('id');				var dataString = 'action=delete_history_private_recall&id_user='+id_user+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['otvet']==100){							 jQuery('.history-'+data['id_user']).remove();						} else {							alert('Ошибка удаления!');						}					} 				});	  					return false;			});		jQuery('.remove_ban_list').live('click',function(){				var id_user = jQuery(this).attr('id');				var dataString = 'action=remove_ban_list_rcl&id_user='+id_user+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['otvet']==100){							 jQuery('.history-'+data['id_user']).remove();						} else {							alert('Ошибка удаления!');						}					} 				});	  					return false;			});		/* Получаем старые сообщения в переписке */				jQuery('.old_message').live('click',function(){				block_mess++;				var dataString = 'action=get_old_private_message_recall&block_mess='+block_mess+'&old_num_mess='+old_num_mess+'&user='+user_old_mess+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('.old_mess_block').replaceWith(data['message_block']);							old_num_mess = data['num_mess_now'];						}					} 				});	  					return false;			});					jQuery('#get-important-rcl').live('click',function(){			if(jQuery(this).hasClass('important')){				jQuery(this).removeClass('important').text('Вся переписка');				var type = 0;				if(block_mess) block_mess = 1;			}else{				jQuery(this).addClass('important').text('Важные сообщения');				var type = 1;			}				var userid = parseInt(jQuery('.wprecallblock').attr('id').replace(/\D+/g,''));				var dataString = 'action=get_important_message_rcl&user='+userid+'&type='+type+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('#message-list').html(data['content']);						}					} 				});	  					return false;			});		jQuery('.correspond .sec_block_button').live('click',function(){				if(jQuery(this).hasClass('active'))return false;				var days = jQuery(this).attr('data');				jQuery('.correspond .sec_block_button').removeClass('active');				jQuery(this).addClass('active');				var dataString = 'action=get_interval_contacts_rcl&days='+days+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('.correspond #contact-lists').html(data['message_block']);												} else {							alert('Error');						}					} 				});							return false;			});		jQuery('#get-all-contacts').live('click',function(){			var dataString = 'action=get_interval_contacts_rcl&days=0&user_ID='+user_ID;			jQuery.ajax({				".$ajaxfile."				success: function(data){					if(data['recall']==100){						jQuery('#rcl-overlay').fadeIn();						jQuery('#rcl-popup').html('<a href=# class=close-popup></a>'+data['message_block']);						var screen_top = jQuery(window).scrollTop();						var popup_h = jQuery('#rcl-popup').height();						var window_h = jQuery(window).height();						screen_top = screen_top + 60;						jQuery('#rcl-popup').css('top', screen_top+'px').delay(100).slideDown(400);											}else{						alert('Ошибка!');					}				} 			});	  				return false;		});		jQuery('.message-block .important').live('click',function(){			update_important_rcl(jQuery(this).attr('idmess'));			return false;		});		function update_important_rcl(id_mess){				var dataString = 'action=update_important_rcl&id_mess='+id_mess+'&user_ID='+user_ID;			jQuery.ajax({				".$ajaxfile."				success: function(data){					if(data['res']==100) jQuery('#message-'+id_mess+' .important').addClass('active');					if(data['res']==200) jQuery('#message-'+id_mess+' .important').removeClass('active');					} 			});	  				return false;		}		";		return $script;	}}$rcl_message = new rcl_message();function add_message_rcl($args){	global $user_ID,$wpdb;		if($args['author']) $author = $args['author'];	else $author = $user_ID;		if(!$args['content']) return false;		$content = $args['content'];	$addressat = $args['addressat'];	$status_mess = 0;	$time = current_time('mysql');	$content_mess = apply_filters('rcl_pre_save_private_message',$content);	$result = $wpdb->insert(		RCL_PREF.'private_message',			array( 			'author_mess' => $author, 			'content_mess' => $content_mess, 			'adressat_mess' => $addressat,			'time_mess' => $time, 			'status_mess' => $status_mess		)	);	$status = $wpdb->get_var("SELECT status FROM ".RCL_PREF."private_contacts WHERE user = '$author' AND contact = '$addressat'");	if(!$status){		$wpdb->insert(			RCL_PREF.'private_contacts',				array( 				'user' => $author, 				'contact' => $addressat, 				'status' => 1 			)		);		$wpdb->insert(			RCL_PREF.'private_contacts',				array( 				'user' => $addressat, 				'contact' => $author, 				'status' => 1 			)		);	}	if($status==3){		$wpdb->update( 			RCL_PREF.'private_contacts',				array( 'status' => 1 ), 				array( 'user' => "$user_ID", 'contact' => $addressat )			);		$wpdb->update( 			RCL_PREF.'private_contacts',				array( 'status' => 1 ), 				array( 'user' => $addressat, 'contact' => $author )			);	}		return $result;}include_once 'notify.php';